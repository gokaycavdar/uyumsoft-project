// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250725113646_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Entities.AdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Created provider: Türkiye Elektrik Şarj A.Ş.",
                            AdminId = 1,
                            Timestamp = new DateTime(2024, 1, 3, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Added charging station: Ankara Çankaya - Kızılay Metro Çıkışı",
                            AdminId = 1,
                            Timestamp = new DateTime(2024, 1, 3, 9, 30, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ChargingSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargingStationId = 1,
                            EndTime = new DateTime(2024, 1, 15, 15, 45, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2024, 1, 15, 14, 30, 0, 0, DateTimeKind.Utc),
                            UserId = 2,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ChargingStationId = 2,
                            EndTime = new DateTime(2024, 1, 16, 11, 0, 0, 0, DateTimeKind.Utc),
                            StartTime = new DateTime(2024, 1, 16, 10, 15, 0, 0, DateTimeKind.Utc),
                            UserId = 4,
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ChargingStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Ankara Çankaya - Kızılay Metro Çıkışı",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Location = "İstanbul Levent - Metro AVM Otoparkı",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            Location = "İzmir Konak - Alsancak Garı",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 4,
                            Location = "Bursa Osmangazi - Şehir Hastanesi",
                            ProviderId = 1
                        });
                });

            modelBuilder.Entity("server.Models.Entities.FavoriteStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargingStationId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChargingStationId = 2,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            ChargingStationId = 3,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ChargingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingSessionId")
                        .IsUnique();

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 187.50m,
                            ChargingSessionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 112.50m,
                            ChargingSessionId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerMinute")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "info@turkiyeelektrik.com | 0312 555 0123",
                            Name = "Türkiye Elektrik Şarj A.Ş.",
                            PricePerMinute = 2.50m,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("server.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@energimetre.com",
                            FullName = "Admin User",
                            PasswordHash = "$2a$11$UCCrFvmFSz88DFtwHc.nh.tcLqI5ZRk8qsfjxt1dndSIu0SUXBura",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmet@test.com",
                            FullName = "Ahmet Yılmaz",
                            PasswordHash = "$2a$11$C125mc7jJ/NsuC3Zwrt2mezvhCJkPYXuY76ZuXy8O1paOiNzZUwjG",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mehmet@test.com",
                            FullName = "Mehmet Demir",
                            PasswordHash = "$2a$11$hJdPRmXiMMmq9K8QhkcSUeBAeOxkq.oz3OdLvFVVTkUTUW38ellyC",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "zeynep@test.com",
                            FullName = "Zeynep Kaya",
                            PasswordHash = "$2a$11$5Ui7AMlKT/Tj2SwL6QdbOuN9aSCJ7vnWdLye6J2OVnr3yHpE4rSbe",
                            Role = 0
                        });
                });

            modelBuilder.Entity("server.Models.Entities.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargingStationId = 1,
                            Comment = "Çok hızlı şarj oluyor, lokasyon mükemmel!",
                            CreatedAt = new DateTime(2024, 1, 15, 16, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChargingStationId = 2,
                            Comment = "AVM'nin içinde olması çok pratik. Alışveriş yaparken şarj oluyor.",
                            CreatedAt = new DateTime(2024, 1, 16, 11, 30, 0, 0, DateTimeKind.Utc),
                            UserId = 4
                        });
                });

            modelBuilder.Entity("server.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Make = "Tesla",
                            Model = "Model 3",
                            PlateNumber = "34 ABC 123",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Make = "BMW",
                            Model = "iX3",
                            PlateNumber = "06 DEF 456",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("server.Models.Entities.AdminLog", b =>
                {
                    b.HasOne("server.Models.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.HasOne("server.Models.Entities.Provider", "Provider")
                        .WithMany("ChargingStations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("server.Models.Entities.FavoriteStation", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany()
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.Invoice", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingSession", "ChargingSession")
                        .WithOne("Invoice")
                        .HasForeignKey("server.Models.Entities.Invoice", "ChargingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingSession");
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.HasOne("server.Models.Entities.User", "User")
                        .WithOne("Provider")
                        .HasForeignKey("server.Models.Entities.Provider", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.UserComment", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany("UserComments")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.Navigation("ChargingStations");
                });

            modelBuilder.Entity("server.Models.Entities.User", b =>
                {
                    b.Navigation("Provider");

                    b.Navigation("UserComments");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
