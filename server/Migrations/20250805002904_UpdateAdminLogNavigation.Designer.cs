// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using server.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250805002904_UpdateAdminLogNavigation")]
    partial class UpdateAdminLogNavigation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("server.Models.Entities.AdminLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AdminLogs");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ChargingSessions");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ChargingStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 41.036900000000003,
                            Location = "İstanbul Taksim Meydanı",
                            Longitude = 28.984999999999999,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 40.990000000000002,
                            Location = "İstanbul Kadıköy İskelesi",
                            Longitude = 29.02,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 41.076599999999999,
                            Location = "İstanbul Levent Metro",
                            Longitude = 29.014199999999999,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 40.898600000000002,
                            Location = "İstanbul Sabiha Gökçen Havalimanı",
                            Longitude = 29.309699999999999,
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 41.058100000000003,
                            Location = "İstanbul Şişli Cevahir AVM",
                            Longitude = 28.9833,
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 41.0839,
                            Location = "İstanbul Fatih Sultan Mehmet Köprüsü",
                            Longitude = 29.037500000000001,
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 39.9208,
                            Location = "Ankara Kızılay",
                            Longitude = 32.854100000000003,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 40.128100000000003,
                            Location = "Ankara Esenboğa Havalimanı",
                            Longitude = 32.995100000000001,
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 39.909999999999997,
                            Location = "Ankara Tunalı Hilmi",
                            Longitude = 32.859999999999999,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 39.950000000000003,
                            Location = "Ankara Atatürk Orman Çiftliği",
                            Longitude = 32.883299999999998,
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 38.418900000000001,
                            Location = "İzmir Konak Meydanı",
                            Longitude = 27.128699999999998,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 12,
                            Latitude = 38.4392,
                            Location = "İzmir Alsancak Limanı",
                            Longitude = 27.137,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 13,
                            Latitude = 38.292400000000001,
                            Location = "İzmir Adnan Menderes Havalimanı",
                            Longitude = 27.157,
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 14,
                            Latitude = 38.450000000000003,
                            Location = "İzmir Forum Bornova",
                            Longitude = 27.216699999999999,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 15,
                            Latitude = 36.884099999999997,
                            Location = "Antalya Kaleiçi",
                            Longitude = 30.7056,
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 16,
                            Latitude = 40.188499999999998,
                            Location = "Bursa Ulus",
                            Longitude = 29.061,
                            ProviderId = 4
                        },
                        new
                        {
                            Id = 17,
                            Latitude = 37.0,
                            Location = "Adana Merkez Park",
                            Longitude = 35.321300000000001,
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 18,
                            Latitude = 37.066200000000002,
                            Location = "Gaziantep Şahinbey",
                            Longitude = 37.383299999999998,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 19,
                            Latitude = 37.866700000000002,
                            Location = "Konya Meram",
                            Longitude = 32.4833,
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 20,
                            Latitude = 39.776699999999998,
                            Location = "Eskişehir Odunpazarı",
                            Longitude = 30.520600000000002,
                            ProviderId = 5
                        },
                        new
                        {
                            Id = 21,
                            Latitude = 41.0015,
                            Location = "Trabzon Ortahisar",
                            Longitude = 39.717799999999997,
                            ProviderId = 6
                        },
                        new
                        {
                            Id = 22,
                            Latitude = 37.914400000000001,
                            Location = "Diyarbakır Sur",
                            Longitude = 40.230600000000003,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 23,
                            Latitude = 41.286700000000003,
                            Location = "Samsun İlkadım",
                            Longitude = 36.329999999999998,
                            ProviderId = 3
                        },
                        new
                        {
                            Id = 24,
                            Latitude = 37.776499999999999,
                            Location = "Denizli Pamukkale",
                            Longitude = 29.086400000000001,
                            ProviderId = 4
                        });
                });

            modelBuilder.Entity("server.Models.Entities.FavoriteStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteStations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargingStationId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            ChargingStationId = 7,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ChargingStationId = 11,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("ChargingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingSessionId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerMinute")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactInfo = "ttenerji@provider.com",
                            Name = "Türk Telekom Enerji",
                            PricePerMinute = 2.50m,
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            ContactInfo = "aksa@provider.com",
                            Name = "Aksa Enerji",
                            PricePerMinute = 2.25m,
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            ContactInfo = "zorlu@provider.com",
                            Name = "Zorlu Enerji",
                            PricePerMinute = 2.75m,
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            ContactInfo = "enerjisa@provider.com",
                            Name = "Enerjisa",
                            PricePerMinute = 2.40m,
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            ContactInfo = "shell@provider.com",
                            Name = "Shell Recharge",
                            PricePerMinute = 3.00m,
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            ContactInfo = "po@provider.com",
                            Name = "Petrol Ofisi Charge",
                            PricePerMinute = 2.80m,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("server.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@test.com",
                            FullName = "Admin User",
                            PasswordHash = "$2a$11$gG/BhmbytkW5upHV0e.woehf3juy0X4NbXYDs5OOfv5HpMYg5ezdO",
                            Role = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "user@test.com",
                            FullName = "Test User",
                            PasswordHash = "$2a$11$OxSxEg2ZSXLRH3UL1gQBEOGcybiSBCeFCLDY4kvrJqe9iU9.J6qTy",
                            Role = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ttenerji@provider.com",
                            FullName = "Türk Telekom Enerji",
                            PasswordHash = "$2a$11$OOfJtdJQ.eN8yn1ZpAWNbeKd57eQC7mq.JZyEm2pP.1pIgNKNYDxG",
                            Role = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "aksa@provider.com",
                            FullName = "Aksa Enerji",
                            PasswordHash = "$2a$11$87HUT1Kj9iNkWEMgyFzXOOytkG7dQMgo/DfgWS8X1NVcLQE5SQA5C",
                            Role = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "zorlu@provider.com",
                            FullName = "Zorlu Enerji",
                            PasswordHash = "$2a$11$TKwXeDmTIoXoekmriWOqvu5DELwxn4ocuy/3qBFGx55EFxeiAyjka",
                            Role = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "enerjisa@provider.com",
                            FullName = "Enerjisa",
                            PasswordHash = "$2a$11$MCbsEnE/ajdvcAHOV/86tOghfcj03x6SpIbXyhnX2UrAhWUIHZJri",
                            Role = 2
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "shell@provider.com",
                            FullName = "Shell Recharge",
                            PasswordHash = "$2a$11$mv4/yHrMcFbYLF80m0PIx.AEc6zzEgt16TsqhLe1Wf/rtVcoF3FK.",
                            Role = 2
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 7, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "po@provider.com",
                            FullName = "Petrol Ofisi Charge",
                            PasswordHash = "$2a$11$iHHC.D8TAwrE5jDQz67pnOWfLk03C2vivh8pYl6pn.eIrOtJ5YcJK",
                            Role = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.UserComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChargingStationId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChargingStationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("server.Models.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Make = "Tesla",
                            Model = "Model 3",
                            PlateNumber = "34 ABC 123",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("server.Models.Entities.AdminLog", b =>
                {
                    b.HasOne("server.Models.Entities.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.HasOne("server.Models.Entities.Provider", "Provider")
                        .WithMany("ChargingStations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("server.Models.Entities.FavoriteStation", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany()
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.Invoice", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingSession", "ChargingSession")
                        .WithOne("Invoice")
                        .HasForeignKey("server.Models.Entities.Invoice", "ChargingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingSession");
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.HasOne("server.Models.Entities.User", "User")
                        .WithOne("Provider")
                        .HasForeignKey("server.Models.Entities.Provider", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.UserComment", b =>
                {
                    b.HasOne("server.Models.Entities.ChargingStation", "ChargingStation")
                        .WithMany("UserComments")
                        .HasForeignKey("ChargingStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargingStation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("server.Models.Entities.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("server.Models.Entities.ChargingSession", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();
                });

            modelBuilder.Entity("server.Models.Entities.ChargingStation", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("server.Models.Entities.Provider", b =>
                {
                    b.Navigation("ChargingStations");
                });

            modelBuilder.Entity("server.Models.Entities.User", b =>
                {
                    b.Navigation("Provider");

                    b.Navigation("UserComments");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
